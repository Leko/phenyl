// @flow

import type {
  UpdateOperation,
} from 'mongolike-operations'
import type { Id } from './id.js.flow'
import type { Session } from './session.js.flow'
import type { Entity } from './entity.js.flow'

type EntityName = string

export type DeleteCommandResult = {
  ok: 1,
  n: number,
}

export type SingleInsertCommandResult = {
  ok: 1,
  n: number,
  versionId: Id,
}

export type MultiInsertCommandResult = {
  ok: 1,
  n: number,
  versionsById: { [entityId: Id]: Id },
}

export type IdUpdateCommandResult = {
  ok: 1,
  n: number,
  versionId: Id,
  prevVersionId: ?Id,
}

export type MultiUpdateCommandResult<IdMap: { [Id]: Id }> = {
  ok: 1,
  n: number,
  versionsById: IdMap,
  prevVersionsById: $ObjMap<IdMap, Id => Id>,
}

export type MultiValuesCommandResult<E: Entity, IdMap: { [Id]: Id }> = {
  ok: 1,
  n: number,
  entities: Array<E>,
  versionsById: IdMap,
  prevVersionsById: $ObjMap<IdMap, Id => Id>,
}

export type GetCommandResult<E: Entity> = {|
  ok: 1,
  n: number, // TODO necessary?
  entity: E,
  versionId: Id,
  prevVersionId: ?Id,
|}

export type PushCommandResult<E: Entity> = {|
  ok: 1,
  n: number, // TODO necessary?
  hasEntity: 0,
  operations: Array<UpdateOperation>,
  newOperation: UpdateOperation,
  versionId: Id,
  prevVersionId: ?Id,
|} | {|
  ok: 1,
  n: number, // TODO necessary?
  hasEntity: 1,
  entity: E,
  versionId: Id,
  prevVersionId: ?Id,
  newOperation: UpdateOperation,
|}

export type CustomCommandResult<R: Object> = {
  ok: 1,
  result?: R
}

export type CustomCommandMap = {
  [name: string]: { params: Object, result: Object }
}

export type LoginCommandResult<E: Entity> = {
  ok: 1,
  session: Session,
  user: ?E,
  versionId: ?Id,
}

export type AuthCommandMap = {
  [name: EntityName]: { credentials: Object, options?: Object }
}

export type LogoutCommandResult = {
  ok: 1,
}
