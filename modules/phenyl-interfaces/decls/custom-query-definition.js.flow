// @flow

import type { Session } from './session.js.flow'
import type {
  CustomParams,
  CustomResult,
} from './client.js.flow'
import type {
  CustomQuery,
} from './query.js.flow'
import type {
  CustomQueryMap,
  CustomQueryResult,
} from './query-result.js.flow'

export interface CustomQueryDefinition<N: string, P: Object, R: Object> {
  authorization(query: CustomQuery<N, P>, session: ?Session): Promise<boolean>,
  +normalization?: (query: CustomQuery<N, P>, session: ?Session) => Promise<CustomQuery<N, P>>,
  validation(query: CustomQuery<N, P>, session: ?Session): Promise<void>,
  execution(query: CustomQuery<N, P>, session: ?Session): Promise<CustomQueryResult<R>>, // CustomQueryHandler
}

export type CustomQueryDefinitions<QM: CustomQueryMap> =
  $ObjMap<QM, <T, N: $Keys<QM>>(T, N) => CustomQueryDefinition<N, CustomParams<QM, T>, CustomResult<QM, T>>>
