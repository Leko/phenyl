// @flow

import type {
  Entity,
  EntityMap,
} from './entity.js.flow'
import type { Session } from './session.js.flow'
import type { CRUDRequestData } from './request-data.js.flow'
import type { ResponseData } from './response-data.js.flow'
import type { RestApiExecution } from './handler.js.flow'

type EntityName = string

export interface EntityDefinition<N: EntityName, E: Entity> {
  authorization(reqData: CRUDRequestData<N, E>, session: ?Session): Promise<boolean>, // AuthorizationHandler
  +normalization?: (reqData: CRUDRequestData<N, E>, session: ?Session) => Promise<CRUDRequestData<N, E>>, // RequestNormalizationHandler
  validation(reqData: CRUDRequestData<N, E>, session: ?Session): Promise<void>, // ValidationHandler
  wrapExecution(reqData: CRUDRequestData<N, E>, session: ?Session, execution: RestApiExecution): Promise<ResponseData>, // ExecutionWrapper
}

export type EntityDefinitions<EM: EntityMap> = $ObjMap<EM, <T, N>(T, N) => EntityDefinition<N, T>>
