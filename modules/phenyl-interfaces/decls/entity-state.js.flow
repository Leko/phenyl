// @flow
import type {
  UpdateOperation
} from 'mongolike-operations'

import type {
  Entity,
  EntityMap,
} from './entity.js.flow'

import type {
  IdQuery,
  IdsQuery,
  WhereQuery,
} from './query.js.flow'

import type {
  IdUpdateCommand,
  MultiUpdateCommand,
  DeleteCommand,
} from './command.js.flow'

type EntityName = string
export type EntityPool<M: EntityMap> = $ObjMap<M, <T>(T) => { [entityName: string]: EntitiesById<T> }>
export type EntitiesById<T: Entity> = { [id: string]: T }

export type EntityState<M: EntityMap> = {
  pool: EntityPool<M>
}

export interface EntityStateFinder<N: EntityName, E: Entity> {
  find(query: WhereQuery<N>): Array<E>,
  findOne(query: WhereQuery<N>): ?E,
  get(query: IdQuery<N>): E,
  getByIds(query: IdsQuery<N>): Array<E>,
  has(query: IdQuery<N>): boolean,
}

export interface EntityStateUpdater<N: EntityName, E: Entity> {
  register(entityName: N, ...entities: Array<E>): UpdateOperation,
  updateById(command: IdUpdateCommand<N>): UpdateOperation,
  updateMulti(command: MultiUpdateCommand<N>): UpdateOperation,
  delete(command: DeleteCommand<N>): UpdateOperation,
}
