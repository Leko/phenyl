// @flow
import type { RequestData } from './request-data.js.flow'
import type { ResponseData } from './response-data.js.flow'
import type { PreSession, Session } from './session.js.flow'
import type { CustomQuery } from './query.js.flow'
import type { CustomQueryResult } from './query-result.js.flow'
import type { LoginCommand, CustomCommand } from './command.js.flow'
import type { CustomCommandResult } from './command-result.js.flow'
import type { Id } from './id.js.flow'
import type { Entity } from './entity.js.flow'
import type {
  TypeMap,
  CustomQueryMap,
  CustomCommandMap,
  CustomParams,
  CustomResult,
  CredentialsOf,
  OptionsOf,
  UserEntityNameOf,
} from './type-map.js.flow'

export type AuthenticationResult = {|
  ok: 1,
  preSession: PreSession,
  user: ?Entity,
  versionId: ?Id,
|}

export type AuthorizationHandler<TM: TypeMap> =
  <EN: string, QN: string, CN: string, AN: string>
  (reqData: RequestData<TM, EN, QN, CN, AN>, session: ?Session) => Promise<boolean>

export type RequestNormalizationHandler<TM: TypeMap> =
  <EN: string, QN: string, CN: string, AN: string, ReqData: RequestData<TM, EN, QN, CN, AN>>
    (reqData: ReqData, session: ?Session) => Promise<ReqData>

export type ValidationHandler<TM: TypeMap> =
  <EN: string, QN: string, CN: string, AN: string>
  (reqData: RequestData<TM, EN, QN, CN, AN>, session: ?Session) => Promise<void>

export type AuthenticationHandler<TM: TypeMap> =
  <N: UserEntityNameOf<TM>>
    (loginCommand: LoginCommand<N, CredentialsOf<TM, N>, OptionsOf<TM, N>>, session: ?Session) => Promise<AuthenticationResult>

export type RestApiExecution<TM: TypeMap> =
  <EN: string, QN: string, CN: string, AN: string, ReqData: RequestData<TM, EN, QN, CN, AN>>
    (reqData: ReqData, session: ?Session) => Promise<ResponseData<TM, EN, QN, CN, AN, ReqData>>

export type ExecutionWrapper<TM: TypeMap> =
  <EN: string, QN: string, CN: string, AN: string, ReqData: RequestData<TM, EN, QN, CN, AN>>
    (reqData: RequestData<TM, EN, QN, CN, AN>, session: ?Session, execution: RestApiExecution<TM>) => Promise<ResponseData<TM, EN, QN, CN, AN, ReqData>>

export type CustomQueryHandler<QM: CustomQueryMap> =
  <N: $Keys<QM>>
   (query: CustomQuery<N, CustomParams<QM, N>>, session: ?Session) => Promise<CustomQueryResult<CustomResult<QM, N>>>

export type CustomCommandHandler<CM: CustomCommandMap> =
  <N: $Keys<CM>>
    (command: CustomCommand<N, CustomParams<CM, N>>, session: ?Session) => Promise<CustomCommandResult<CustomResult<CM, N>>>

export type HandlerParams<TM: TypeMap> = {
  authorizationHandler: AuthorizationHandler<TM>,
  normalizationHandler: RequestNormalizationHandler<TM>,
  validationHandler: ValidationHandler<TM>,
  authenticationHandler: AuthenticationHandler<TM>,
  executionWrapper: ExecutionWrapper<TM>,
  customQueryHandler: CustomQueryHandler<TM>,
  customCommandHandler: CustomCommandHandler<TM>,
}
