// @flow
import type { RequestData } from './request-data.js.flow'
import type { ResponseData } from './response-data.js.flow'
import type { PreSession, Session } from './session.js.flow'
import type { CustomQuery } from './query.js.flow'
import type { CustomQueryResult } from './query-result.js.flow'
import type { LoginCommand, CustomCommand } from './command.js.flow'
import type { CustomCommandResult } from './command-result.js.flow'
import type { Id } from './id.js.flow'
import type { Entity } from './entity.js.flow'
import type {
  TypeMap,
  QueryParamsOf,
  QueryResultOf,
  CommandParamsOf,
  CommandResultOf,
  CredentialsOf,
  OptionsOf,
  EntityNamesOf,
  CustomQueryNamesOf,
  CustomCommandNamesOf,
  UserEntityNamesOf,
} from './type-map.js.flow'

export type AuthenticationResult = {|
  ok: 1,
  preSession: PreSession,
  user: ?Entity,
  versionId: ?Id,
|}

export type AuthorizationHandler<TM: TypeMap> =
  (reqData: RequestData<EntityNamesOf<TM>, TM>, session: ?Session) => Promise<boolean>

export type RequestNormalizationHandler<TM: TypeMap> =
  (reqData: RequestData<EntityNamesOf<TM>, TM>, session: ?Session) => Promise<RequestData<EntityNamesOf<TM>, TM>>

export type ValidationHandler<TM: TypeMap> =
  (reqData: RequestData<EntityNamesOf<TM>, TM>, session: ?Session) => Promise<void>

export type AuthenticationHandler<TM: TypeMap, N: UserEntityNamesOf<TM>> =
  (loginCommand: LoginCommand<N, CredentialsOf<TM, N>, OptionsOf<TM, N>>, session: ?Session) => Promise<AuthenticationResult>

export type RestApiExecution<TM: TypeMap> =
  (reqData: RequestData<EntityNamesOf<TM>, TM>, session: ?Session) => Promise<ResponseData>

export type ExecutionWrapper<TM: TypeMap> =
  (reqData: RequestData<EntityNamesOf<TM>, TM>, session: ?Session, execution: RestApiExecution<TM>) => Promise<ResponseData>

export type CustomQueryHandler<TM: TypeMap, N: CustomQueryNamesOf<TM>> =
  (query: CustomQuery<N, QueryParamsOf<TM, N>>, session: ?Session) => Promise<CustomQueryResult<QueryResultOf<TM, N>>>

export type CustomCommandHandler<TM: TypeMap, N: CustomCommandNamesOf<TM>> =
  (command: CustomCommand<N, CommandParamsOf<TM, N>>, session: ?Session) => Promise<CustomCommandResult<CommandResultOf<TM, N>>>

export type HandlerParams<TM: TypeMap> = {
  authorizationHandler: AuthorizationHandler<TM>,
  normalizationHandler: RequestNormalizationHandler<TM>,
  validationHandler: ValidationHandler<TM>,
  authenticationHandler: AuthenticationHandler<TM>,
  executionWrapper: ExecutionWrapper<TM>,
  customQueryHandler: CustomQueryHandler<TM>,
  customCommandHandler: CustomCommandHandler<TM>,
}
