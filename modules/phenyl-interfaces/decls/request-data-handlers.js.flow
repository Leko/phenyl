// @flow
import type {
  RequestData
} from './request-data.js.flow'
import type {
  WhereQuery,
  IdQuery,
  IdsQuery,
  CustomQuery,
  PullQuery,
} from './query.js.flow'
import type {
  TypeMap,
  EntityOf,
  EntityNamesOf,
  CustomQueryNamesOf,
  QueryParamsOf,
  CustomCommandNamesOf,
  CommandParamsOf,
  UserEntityNamesOf,
  CredentialsOf,
  OptionsOf,
} from './type-map.js.flow'

import type {
  SingleInsertCommand,
  MultiInsertCommand,
  IdUpdateCommand,
  MultiUpdateCommand,
  DeleteCommand,
  CustomCommand,
  LoginCommand,
  LogoutCommand,
  PushCommand,
} from './command.js.flow'

export type RequestDataHandlers<TM: TypeMap, T> = {
  handleDefault: (reqData: RequestData<*, TM>) => Promise<T>,

  find?: (query: WhereQuery<EntityNamesOf<TM>>) => Promise<T>,
  findOne?: (query: WhereQuery<EntityNamesOf<TM>>) => Promise<T>,
  get?: (query: IdQuery<EntityNamesOf<TM>>) => Promise<T>,
  getByIds?: (query: IdsQuery<EntityNamesOf<TM>>) => Promise<T>,
  pull?: (query: PullQuery<EntityNamesOf<TM>>) => Promise<T>,
  insertOne?: <N: EntityNamesOf<TM>>(command: SingleInsertCommand<N, EntityOf<TM, N>>) => Promise<T>,
  insertMulti?: <N: EntityNamesOf<TM>>(command: MultiInsertCommand<N, EntityOf<TM, N>>) => Promise<T>,
  insertAndGet?: <N: EntityNamesOf<TM>>(command: SingleInsertCommand<N, EntityOf<TM, N>>) => Promise<T>,
  insertAndGetMulti?: <N: EntityNamesOf<TM>>(command: MultiInsertCommand<N, EntityOf<TM, N>>) => Promise<T>,
  updateById?: (command: IdUpdateCommand<EntityNamesOf<TM>>) => Promise<T>,
  updateMulti?: (command: MultiUpdateCommand<EntityNamesOf<TM>>) => Promise<T>,
  updateAndGet?: (command: IdUpdateCommand<EntityNamesOf<TM>>) => Promise<T>,
  updateAndFetch?: (command: MultiUpdateCommand<EntityNamesOf<TM>>) => Promise<T>,
  push?: (command: PushCommand<EntityNamesOf<TM>>) => Promise<T>,
  delete?: (command: DeleteCommand<EntityNamesOf<TM>>) => Promise<T>,
  runCustomQuery?: <N: CustomQueryNamesOf<TM>>(query: CustomQuery<N, QueryParamsOf<TM, N>>) => Promise<T>,
  runCustomCommand?: <N: CustomCommandNamesOf<TM>>(command: CustomCommand<N, CommandParamsOf<TM, N>>) => Promise<T>,
  login?: <N: UserEntityNamesOf<TM>>(command: LoginCommand<N, CredentialsOf<TM, N>, OptionsOf<TM, N>>) => Promise<T>,
  logout?: <N: UserEntityNamesOf<TM>>(command: LogoutCommand<N>) => Promise<T>,

  notMatch?: (reqData: RequestData<*, TM>) => Promise<T>,
}
