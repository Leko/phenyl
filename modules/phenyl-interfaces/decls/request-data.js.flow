// @flow
import type {
  Id
} from './id.js.flow'
import type {
  TypeMap,
  EntityOf,
  QueryParamsOf,
  CommandParamsOf,
  CredentialsOf,
  OptionsOf,
  EntityNameOf,
  CustomQueryNameOf,
  CustomCommandNameOf,
  UserEntityNameOf,
} from './type-map.js.flow'
import type {
  Entity,
  PreEntity,
} from './entity.js.flow'
import type {
  IdsQuery,
  IdQuery,
  PullQuery,
  WhereQuery,
  CustomQuery,
} from './query.js.flow'
import type {
  DeleteCommand,
  SingleInsertCommand,
  MultiInsertCommand,
  LoginCommand,
  LogoutCommand,
  PushCommand,
  IdUpdateCommand,
  MultiUpdateCommand,
  CustomCommand,
} from './command.js.flow'

type EntityName = string

export type RequestMethodName =
  'find' |
  'findOne' |
  'get' |
  'getByIds' |
  'pull' |
  'insertOne' |
  'insertAndGet' |
  'insertAndGetMulti' |
  'updateById' |
  'updateMulti' |
  'updateAndGet' |
  'updateAndFetch' |
  'push' |
  'delete' |
  'runCustomQuery' |
  'runCustomCommand' |
  'login' |
  'logout'

export type CRUDRequestData<N: EntityName, E: Entity> =
  FindRequestData<N> |
  FindOneRequestData<N> |
  GetRequestData<N> |
  GetByIdsRequestData<N> |
  PullRequestData<N> |
  InsertOneRequestData<N, E> |
  InsertMultiRequestData<N, E> |
  InsertAndGetRequestData<N, E> |
  InsertAndGetMultiRequestData<N, E> |
  UpdateOneRequestData<N> |
  UpdateMultiRequestData<N> |
  UpdateAndGetRequestData<N> |
  UpdateAndFetchRequestData<N> |
  PushRequestData<N> |
  DeleteRequestData<N>

export type AuthRequestData<N: EntityName, C: Object, O: Object> =
  LoginRequestData<N, C, O> |
  LogoutRequestData<N>

export type RequestData<
  TM: TypeMap,
  EN: EntityNameOf<TM>,
  QN: CustomQueryNameOf<TM>,
  CN: CustomCommandNameOf<TM>,
  AN: UserEntityNameOf<TM>,
> =
  CRUDRequestData<EN, EntityOf<TM, EN>> |
  RunCustomQueryRequestData<QN, QueryParamsOf<TM, QN>> |
  RunCustomCommandRequestData<CN, CommandParamsOf<TM, CN>> |
  AuthRequestData<AN, CredentialsOf<TM, AN>, OptionsOf<TM, AN>>

export type AnyRequestData = RequestData<*, *, *, *, *>
export type RequestDataOf<TM: TypeMap> = RequestData<TM, *, *, *, *>

export type FindRequestData<N: EntityName> = {|
  method: 'find',
  +payload: WhereQuery<N>,
  sessionId?: ?Id,
|}

export type FindOneRequestData<N: EntityName> = {|
  method: 'findOne',
  +payload: WhereQuery<N>,
  sessionId?: ?Id,
|}

export type GetRequestData<N: EntityName> = {|
  method: 'get',
  +payload: IdQuery<N>,
  sessionId?: ?Id,
|}

export type GetByIdsRequestData<N: EntityName> = {|
  method: 'getByIds',
  +payload: IdsQuery<N>,
  sessionId?: ?Id,
|}

export type PullRequestData<N: EntityName> = {|
  method: 'pull',
  +payload: PullQuery<N>,
  sessionId?: ?Id,
|}

export type InsertOneRequestData<N: EntityName, E: Entity> = {|
  method: 'insertOne',
  +payload: SingleInsertCommand<N, PreEntity<E>>,
  sessionId?: ?Id,
|}

export type InsertMultiRequestData<N: EntityName, E: Entity> = {|
  method: 'insertMulti',
  +payload: MultiInsertCommand<N, PreEntity<E>>,
  sessionId?: ?Id,
|}

export type InsertAndGetRequestData<N: EntityName, E: Entity> = {|
  method: 'insertAndGet',
  +payload: SingleInsertCommand<N, PreEntity<E>>,
  sessionId?: ?Id,
|}

export type InsertAndGetMultiRequestData<N: EntityName, E: Entity> = {|
  method: 'insertAndGetMulti',
  +payload: MultiInsertCommand<N, PreEntity<E>>,
  sessionId?: ?Id,
|}

export type UpdateOneRequestData<N: EntityName> = {|
  method: 'updateById',
  +payload: IdUpdateCommand<N>,
  sessionId?: ?Id,
|}

export type UpdateMultiRequestData<N: EntityName> = {|
  method: 'updateMulti',
  +payload: MultiUpdateCommand<N>,
  sessionId?: ?Id,
|}

export type UpdateAndGetRequestData<N> = {|
  method: 'updateAndGet',
  +payload: IdUpdateCommand<N>,
  sessionId?: ?Id,
|}

export type UpdateAndFetchRequestData<N> = {|
  method: 'updateAndFetch',
  +payload: MultiUpdateCommand<N>,
  sessionId?: ?Id,
|}

export type PushRequestData<N: EntityName> = {|
  method: 'push',
  +payload: PushCommand<N>,
  sessionId?: ?Id,
|}

export type DeleteRequestData<N: EntityName> = {|
  method: 'delete',
  +payload: DeleteCommand<N>,
  sessionId?: ?Id,
|}

export type RunCustomQueryRequestData<N: string, P: Object> = {|
  method: 'runCustomQuery',
  +payload: CustomQuery<N, P>,
  sessionId?: ?Id,
|}

export type RunCustomCommandRequestData<N: string, P: Object> = {|
  method: 'runCustomCommand',
  +payload: CustomCommand<N, P>,
  sessionId?: ?Id,
|}

export type LoginRequestData<N: EntityName, C: Object, O: Object> = {|
  method: 'login',
  +payload: LoginCommand<N, C, O>,
  sessionId?: ?Id,
|}

export type LogoutRequestData<N: EntityName> = {|
  method: 'logout',
  +payload: LogoutCommand<N>,
  sessionId?: ?Id,
|}
