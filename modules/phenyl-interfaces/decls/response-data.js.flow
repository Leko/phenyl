// @flow
import type {
  Entity,
} from './entity.js.flow'

import type {
  RequestData,
  CRUDRequestData,
  AuthRequestData,
  RequestDataOf,
} from './request-data.js.flow'

import type {
  ServerError,
} from './error.js.flow'

import type {
  TypeMap,
  EntityOf,
  QueryResultOf,
  CommandResultOf,
} from './type-map.js.flow'

import type {
  CustomQueryResult,
  PullQueryResult,
  QueryResult,
  SingleQueryResult,
} from './query-result.js.flow'

import type {
  CustomCommandResult,
  DeleteCommandResult,
  GetCommandResult,
  IdUpdateCommandResult,
  LoginCommandResult,
  LogoutCommandResult,
  MultiInsertCommandResult,
  MultiUpdateCommandResult,
  MultiValuesCommandResult,
  PushCommandResult,
  SingleInsertCommandResult,
} from './command-result.js.flow'

export type CRUDResponseDataMap<
  TM: TypeMap,
  EN: string,
> = {
  find: FindResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  findOne: FindOneResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  get: GetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  getByIds: GetByIdsResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  pull: PullResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  insertOne: InsertOneResponseData | ErrorResponseData,
  insertMulti: InsertMultiResponseData | ErrorResponseData,
  insertAndGet: InsertAndGetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  insertAndGetMulti: InsertAndGetMultiResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  updateById: UpdateOneResponseData | ErrorResponseData,
  updateMulti: UpdateMultiResponseData<*> | ErrorResponseData,
  updateAndGet: UpdateAndGetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  updateAndFetch: UpdateAndFetchResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  push: PushResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  delete: DeleteResponseData | ErrorResponseData,
}

export type CRUDResponseData<
  TM: TypeMap,
  EN: string,
  ReqData: CRUDRequestData<EN, EntityOf<EN>>
> = $ElementType<CRUDResponseDataMap<TM, EN>, $ElementType<ReqData, 'method'>>

export type CustomQueryResponseDataMap<
  TM: TypeMap,
  QN: string,
> = {
  runCustomQuery: RunCustomQueryResponseData<QueryResultOf<TM, QN>> | ErrorResponseData
}

export type CustomQueryResponseData<
  TM: TypeMap,
  QN: string,
> = $ElementType<CustomQueryResponseDataMap<TM, QN>, 'runCustomQuery'>

export type CustomCommandResponseDataMap<
  TM: TypeMap,
  CN: string,
> = {
  runCustomCommand: RunCustomCommandResponseData<CommandResultOf<TM, CN>> | ErrorResponseData
}

export type CustomCommandResponseData<
  TM: TypeMap,
  CN: string,
> = $ElementType<CustomCommandResponseDataMap<TM, CN>, 'runCustomCommand'>


export type AuthResponseDataMap<
  TM: TypeMap,
  AN: string,
> = {
  login: LoginResponseData<EntityOf<TM, AN>> | ErrorResponseData,
  logout: LogoutResponseData | ErrorResponseData
}

export type AuthResponseData<
  TM: TypeMap,
  AN: string,
  ReqData: AuthRequestData<TM, AN>
> = $ElementType<AuthResponseDataMap<TM, AN>, $ElementType<ReqData, 'method'>>


export type ResponseDataMap<
  TM: TypeMap,
  EN: string,
  QN: string,
  CN: string,
  AN: string,
> = {
  find: FindResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  findOne: FindOneResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  get: GetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  getByIds: GetByIdsResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  pull: PullResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  insertOne: InsertOneResponseData | ErrorResponseData,
  insertMulti: InsertMultiResponseData | ErrorResponseData,
  insertAndGet: InsertAndGetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  insertAndGetMulti: InsertAndGetMultiResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  updateById: UpdateOneResponseData | ErrorResponseData,
  updateMulti: UpdateMultiResponseData<*> | ErrorResponseData,
  updateAndGet: UpdateAndGetResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  updateAndFetch: UpdateAndFetchResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  push: PushResponseData<EntityOf<TM, EN>> | ErrorResponseData,
  delete: DeleteResponseData | ErrorResponseData,
  runCustomQuery: RunCustomQueryResponseData<QueryResultOf<TM, QN>> | ErrorResponseData,
  runCustomCommand: RunCustomCommandResponseData<CommandResultOf<TM, CN>> | ErrorResponseData,
  login: LoginResponseData<EntityOf<TM, AN>> | ErrorResponseData,
  logout: LogoutResponseData | ErrorResponseData
}


export type ResponseData<
  TM: TypeMap,
  EN: string,
  QN: string,
  CN: string,
  AN: string,
  ReqData: RequestData<TM, EN, QN, CN, AN>
> = $ElementType<ResponseDataMap<TM, EN, QN, CN, AN>, $ElementType<ReqData, 'method'>>

export type AnyResponseData = ResponseData<*, *, *, *, *, *>
export type ResponseDataOf<TM: TypeMap> = ResponseData<TM, *, *, *, *, RequestDataOf<TM>>

export type FindResponseData<E: Entity> = {|
  type: 'find',
  +payload: QueryResult<E>,
|}

export type FindOneResponseData<E: Entity> = {|
  type: 'findOne',
  +payload: SingleQueryResult<E>,
|}

export type GetResponseData<E: Entity> = {|
  type: 'get',
  +payload: SingleQueryResult<E>,
|}

export type GetByIdsResponseData<E: Entity> = {|
  type: 'getByIds',
  +payload: QueryResult<E>,
|}

export type PullResponseData<E: Entity> = {|
  type: 'pull',
  +payload: PullQueryResult<E>,
|}

export type InsertOneResponseData = {|
  type: 'insertOne',
  +payload: SingleInsertCommandResult,
|}

export type InsertMultiResponseData = {|
  type: 'insertMulti',
  +payload: MultiInsertCommandResult,
|}

export type InsertAndGetResponseData<E: Entity> = {|
  type: 'insertAndGet',
  +payload: GetCommandResult<E>,
|}

export type InsertAndGetMultiResponseData<E: Entity> = {|
  type: 'insertAndGetMulti',
  +payload: MultiValuesCommandResult<E, *>,
|}

export type UpdateOneResponseData = {|
  type: 'updateById',
  +payload: IdUpdateCommandResult,
|}

export type UpdateMultiResponseData<E: Entity> = {|
  type: 'updateMulti',
  +payload: MultiUpdateCommandResult<E>,
|}

export type UpdateAndGetResponseData<E: Entity> = {|
  type: 'updateAndGet',
  +payload: GetCommandResult<E>,
|}

export type UpdateAndFetchResponseData<E: Entity> = {|
  type: 'updateAndFetch',
  +payload: MultiValuesCommandResult<E, *>,
|}

export type PushResponseData<E: Entity> = {|
  type: 'push',
  +payload: PushCommandResult<E>,
|}

export type DeleteResponseData = {|
  type: 'delete',
  +payload: DeleteCommandResult,
|}

export type RunCustomQueryResponseData<R: Object> = {|
  type: 'runCustomQuery',
  +payload: CustomQueryResult<R>,
|}

export type RunCustomCommandResponseData<R: Object> = {|
  type: 'runCustomCommand',
  +payload: CustomCommandResult<R>,
|}

export type LoginResponseData<E: Entity> = {|
  type: 'login',
  +payload: LoginCommandResult<E>,
|}

export type LogoutResponseData = {|
  type: 'logout',
  +payload: LogoutCommandResult,
|}

export type ErrorResponseData = {|
  type: 'error',
  +payload: ServerError,
|}
