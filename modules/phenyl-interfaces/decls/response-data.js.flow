// @flow
import type {
  Entity,
} from './entity.js.flow'

import type {
  ServerError,
} from './error.js.flow'

import type {
  TypeMap,
  EntityOf,
  QueryResultOf,
  CommandResultOf,
} from './type-map.js.flow'

import type {
  CustomQueryResult,
  PullQueryResult,
  QueryResult,
  SingleQueryResult,
} from './query-result.js.flow'

import type {
  CustomCommandResult,
  DeleteCommandResult,
  GetCommandResult,
  IdUpdateCommandResult,
  LoginCommandResult,
  LogoutCommandResult,
  MultiInsertCommandResult,
  MultiUpdateCommandResult,
  MultiValuesCommandResult,
  PushCommandResult,
  SingleInsertCommandResult,
} from './command-result.js.flow'

export type CRUDResponseData<E: Entity> =
  FindResponseData<E> |
  FindOneResponseData<E> |
  GetResponseData<E> |
  GetByIdsResponseData<E> |
  PullResponseData<E> |
  InsertOneResponseData |
  InsertMultiResponseData |
  InsertAndGetResponseData<E> |
  InsertAndGetMultiResponseData<E> |
  UpdateOneResponseData |
  UpdateMultiResponseData<E> |
  UpdateAndGetResponseData<E> |
  UpdateAndFetchResponseData<E> |
  PushResponseData<E> |
  DeleteResponseData |
  ErrorResponseData

export type CustomQueryResponseData<R: Object> =
  RunCustomQueryResponseData<R> |
  ErrorResponseData

export type CustomCommandResponseData<R: Object> =
  RunCustomCommandResponseData<R> |
  ErrorResponseData

export type AuthResponseData<E: Entity> =
  LoginResponseData<E> |
  LogoutResponseData |
  ErrorResponseData

export type ResponseData<N: string, TM: TypeMap> =
  CRUDResponseData<EntityOf<TM, N>> |
  CustomQueryResponseData<QueryResultOf<TM, N>> |
  CustomCommandResponseData<CommandResultOf<TM, N>> |
  AuthResponseData<EntityOf<TM, N>>

export type FindResponseData<E: Entity> = {|
  type: 'find',
  +payload: QueryResult<E>,
|}

export type FindOneResponseData<E: Entity> = {|
  type: 'findOne',
  +payload: SingleQueryResult<E>,
|}

export type GetResponseData<E: Entity> = {|
  type: 'get',
  +payload: SingleQueryResult<E>,
|}

export type GetByIdsResponseData<E: Entity> = {|
  type: 'getByIds',
  +payload: QueryResult<E>,
|}

export type PullResponseData<E: Entity> = {|
  type: 'pull',
  +payload: PullQueryResult<E>,
|}

export type InsertOneResponseData = {|
  type: 'insertOne',
  +payload: SingleInsertCommandResult,
|}

export type InsertMultiResponseData = {|
  type: 'insertMulti',
  +payload: MultiInsertCommandResult,
|}

export type InsertAndGetResponseData<E: Entity> = {|
  type: 'insertAndGet',
  +payload: GetCommandResult<E>,
|}

export type InsertAndGetMultiResponseData<E: Entity> = {|
  type: 'insertAndGetMulti',
  +payload: MultiValuesCommandResult<E, *>,
|}

export type UpdateOneResponseData = {|
  type: 'updateById',
  +payload: IdUpdateCommandResult,
|}

export type UpdateMultiResponseData<E: Entity> = {|
  type: 'updateMulti',
  +payload: MultiUpdateCommandResult<E, *>,
|}

export type UpdateAndGetResponseData<E: Entity> = {|
  type: 'updateAndGet',
  +payload: GetCommandResult<E>,
|}

export type UpdateAndFetchResponseData<E: Entity> = {|
  type: 'updateAndFetch',
  +payload: MultiValuesCommandResult<E>,
|}

export type PushResponseData<E: Entity> = {|
  type: 'push',
  +payload: PushCommandResult<E>,
|}

export type DeleteResponseData = {|
  type: 'delete',
  +payload: DeleteCommandResult,
|}

export type RunCustomQueryResponseData<R: Object> = {|
  type: 'runCustomQuery',
  +payload: CustomQueryResult<R>,
|}

export type RunCustomCommandResponseData<R: Object> = {|
  type: 'runCustomCommand',
  +payload: CustomCommandResult<R>,
|}

export type LoginResponseData<E: Entity> = {|
  type: 'login',
  +payload: LoginCommandResult<E>,
|}

export type LogoutResponseData = {|
  type: 'logout',
  +payload: LogoutCommandResult,
|}

export type ErrorResponseData = {|
  type: 'error',
  +payload: ServerError,
|}
